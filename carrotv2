<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carrot Catcher Deluxe</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background: linear-gradient(to bottom, #000000, #1a1a1a);
            margin: 0;
            font-family: Arial, sans-serif;
        }
        canvas {
            background-color: #222;
            border: 2px solid #fff;
            box-shadow: 0 0 20px rgba(255, 255, 255, 0.3);
        }
        #gameInfo {
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            color: white;
            text-align: center;
        }
        #resetButton {
            display: none;
            margin-top: 20px;
            padding: 15px 30px;
            font-size: 24px;
            background: linear-gradient(45deg, #ff6b6b, #feca57);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s;
        }
        #resetButton:hover {
            transform: scale(1.1);
            box-shadow: 0 0 15px rgba(255, 255, 255, 0.5);
        }
        #countdown {
            color: white;
            font-size: 48px;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
        #highScores {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.8);
            padding: 20px;
            border-radius: 10px;
            display: none;
        }
        #highScores h2 {
            color: #feca57;
            margin-top: 0;
        }
        #highScores ol {
            color: white;
            padding-left: 20px;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas" width="800" height="600"></canvas>
    <div id="gameInfo">
        <div id="finalScore" style="display: none;"></div>
        <button id="resetButton" onclick="resetGame()">Play Again</button>
    </div>
    <div id="countdown" style="display: none;"></div>
    <div id="highScores">
        <h2>High Scores</h2>
        <ol id="scoresList"></ol>
    </div>

    <script>
        const canvas = document.getElementById("gameCanvas");
        const ctx = canvas.getContext("2d");

        // Game variables
        let score = 0;
        let gameOver = false;
        const gameDuration = 60; // in seconds
        let startTime;
        let mouseX = canvas.width / 2;
        let mouseY = canvas.height / 2;
        let smileTimer = 0;
        let countdownTime = 3;
        let countdownActive = true;
        let level = 1;
        let powerUpActive = false;
        let powerUpTimer = 0;

        // Sound effects
        const collectSound = new Audio('https://example.com/collect.mp3');
        const powerUpSound = new Audio('https://example.com/powerup.mp3');
        const gameOverSound = new Audio('https://example.com/gameover.mp3');

        // Helper functions
        function randomPosition(max) {
            return Math.floor(Math.random() * max);
        }

        // Player class (smiley face)
        class Player {
            constructor() {
                this.x = canvas.width / 2;
                this.y = canvas.height / 2;
                this.radius = 30;
                this.baseSpeed = 8;
                this.speed = this.baseSpeed;
                this.invincible = false;
            }

            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fillStyle = this.invincible ? "rgba(255, 215, 0, 0.7)" : "yellow";
                ctx.fill();
                ctx.closePath();

                // Eyes
                ctx.beginPath();
                ctx.arc(this.x - 10, this.y - 10, 5, 0, Math.PI * 2);
                ctx.arc(this.x + 10, this.y - 10, 5, 0, Math.PI * 2);
                ctx.fillStyle = "black";
                ctx.fill();
                ctx.closePath();

                // Mouth
                ctx.beginPath();
                if (smileTimer > 0) {
                    ctx.arc(this.x, this.y + 10, 15, 0, Math.PI, false);
                } else {
                    ctx.arc(this.x, this.y + 10, 15, 0, Math.PI, true);
                }
                ctx.stroke();

                if (smileTimer > 0) smileTimer--;

                // Power-up effect
                if (powerUpActive) {
                    ctx.beginPath();
                    ctx.arc(this.x, this.y, this.radius + 5, 0, Math.PI * 2);
                    ctx.strokeStyle = "rgba(255, 255, 255, 0.5)";
                    ctx.lineWidth = 3;
                    ctx.stroke();
                }
            }

            moveTo(x, y) {
                const dx = x - this.x;
                const dy = y - this.y;
                this.x += dx * 0.1 * (this.speed / this.baseSpeed);
                this.y += dy * 0.1 * (this.speed / this.baseSpeed);
            }

            smileFor(duration) {
                smileTimer = duration;
            }
        }

        // Carrot class
        class Carrot {
            constructor() {
                this.x = randomPosition(canvas.width - 20) + 10;
                this.y = randomPosition(canvas.height - 20) + 10;
                this.size = 30;
            }

            draw() {
                ctx.fillStyle = "orange";
                ctx.beginPath();
                ctx.moveTo(this.x, this.y);
                ctx.lineTo(this.x - this.size / 2, this.y + this.size * 2);
                ctx.lineTo(this.x + this.size / 2, this.y + this.size * 2);
                ctx.closePath();
                ctx.fill();

                ctx.fillStyle = "green";
                ctx.beginPath();
                ctx.moveTo(this.x, this.y);
                ctx.lineTo(this.x - 10, this.y - 10);
                ctx.lineTo(this.x + 10, this.y - 10);
                ctx.closePath();
                ctx.fill();
            }
        }

        // Doughnut enemy class
        class Doughnut {
            constructor() {
                this.x = randomPosition(canvas.width);
                this.y = randomPosition(canvas.height);
                this.radius = 25;
                this.speed = 1 + (level * 0.1);
            }

            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fillStyle = "sandybrown";
                ctx.fill();
                ctx.closePath();

                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius - 10, 0, Math.PI * 2);
                ctx.fillStyle = "white";
                ctx.fill();
                ctx.closePath();

                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius - 5, 0, Math.PI * 2);
                ctx.fillStyle = "pink";
                ctx.fill();
                ctx.closePath();

                for (let i = 0; i < 8; i++) {
                    const angle = Math.random() * Math.PI * 2;
                    const sprinkleX = this.x + Math.cos(angle) * (this.radius - 5);
                    const sprinkleY = this.y + Math.sin(angle) * (this.radius - 5);
                    ctx.fillStyle = ["red", "blue", "yellow", "green"][Math.floor(Math.random() * 4)];
                    ctx.fillRect(sprinkleX, sprinkleY, 3, 3);
                }
            }

            chase(player) {
                const dx = player.x - this.x;
                const dy = player.y - this.y;
                const distance = Math.sqrt(dx * dx + dy * dy);
                this.x += (dx / distance) * this.speed;
                this.y += (dy / distance) * this.speed;
            }
        }

        // Power-up class
        class PowerUp {
            constructor() {
                this.x = randomPosition(canvas.width - 20) + 10;
                this.y = randomPosition(canvas.height - 20) + 10;
                this.radius = 15;
                this.type = Math.random() < 0.5 ? 'speed' : 'invincibility';
            }

            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fillStyle = this.type === 'speed' ? 'lightblue' : 'gold';
                ctx.fill();
                ctx.closePath();

                ctx.fillStyle = 'white';
                ctx.font = '20px Arial';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillText(this.type === 'speed' ? 'S' : 'I
